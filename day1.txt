  1  select a.job_title, b.employee_id from jobs a left join job_history b on a.job_id = b.job_id;
  2  connect system /oracle 
  3  create user Bill identified by ABC;
  4  connect Bill /ABC 
  5  connect system 
  6  cls 
  7  desc all_databases;
  8  desc all_database 
  9  desc all_dbs;
 10  desc $databases;
 16  select * from all_users;
 17  select view_name from all_views where view_name like '%USER%';
 18  select view_name from all_views where view_name like 'ALL%USER%';
select * from all_ords_roles;
 21  desc all_ords_roles;
 22  select name from all_ords_roles;
 23  select table_name from all_tables where table_name like '%USER%';
 24  desc app_users_and_roles;
 25  connect as sys /oracle;
 26  create role pilot;
 27  grant create table to pilot;
 28  grant create view to pilot;
 29  grant create trigger to pilot;
 30  grant pilot to Bill;
 32  select user from dual;
 38  create table sales (PID number(3) references products, qty number(3), price number(7,2), Dates date);
 39  insert into sales values(101,2,2,sysdate-1);
 40  insert into sales values(102,1,2.05,sysdate-.51);
 41  insert into sales values(101,1,2.15,sysdate-.4);
 42  insert into sales values(101,2,2.05,sysdate-.3);
 48  insert into sales values(105,2,1.05,sysdate-.51);
 49  insert into sales values(105,3,1.04,sysdate-.5);
 50  insert into sales values(105,1,1.03,sysdate-.4);
 51  insert into sales values(105,2,1.02,sysdate-.3);
 43  insert into sales values(101,1,2.00,sysdate-0.01);
 44  select a.name as PopularItem, count(*) from products a, sales b where a.pid =b.pid group by a.name having count(*) = (select max(count) from (select c.name, count(*) as count from products c, sales d where
 45  insert into sales values(101,2,2.03,sysdate-0.01);
 46  select a.name as PopularItem, count(*) from products a, sales b where a.pid =b.pid group by a.name having count(*) = (select max(count(*)) from sales c group by c.pid);

 create view popularitem as  select a.name as PopularItem, count(*) as count from products a, sales b where a.pid =b.pid group by a.name having count(*) = (select max(count(*)) from sales c group by c.pid);
 create view popularsub as select a.description, count(*) as count from subcategory a, products b, sales c where a.sia = b.sia and b.pid= c.pid group by a.description having count(*) = (select max(count(*))
 39  insert into products values(106,30,'PADS');
 40  insert into sales values (106,1,30.33,sysdate-.5);
 41  create view popularcat as select a.description, count(*) as maxcount from category a, subcategory b, products c, sales d where a.cia = b.cia and b.sia = c.sia and c.pid = d.pid group by a.description havin
 42  select * from popularcat;
 43  select * from popularsub;
 44  select * from popularitem;
 46  desc popularcat;
 49  select a.description, count(*) as maxcount from category a, subcategory b, products c, sales d where a.cia = b.cia and b.sia = c.sia and c.pid = d.pid group by a.description having count(*) = (select max(c
 50  select a.description, count(*) as count from subcategory a, products b, sales c where a.sia = b.sia and b.pid= c.pid group by a.description having count(*) = (select max(count(*)) from subcategory d, produ
create or replace procedure addn(a number, b number, c number) is result number(5); begin result := a+b+c; dbms_output.put_line(chr(10)||'The result of summing your inputs is '|| result); end; /
 63  call addn(400,4000,40);
 72  create or replace procedure addschool(r number, n varchar, m number, e varchar, t varchar) is begin insert into school values (r,n,m,t,e); end; /
 create or replace procedure CreateBankAccount (name varchar, postcode varchar, actype varchar, city varchar)
  is
  begin
  insert into bank values((select upper(substr(actype,1,1))||upper(substr(city,1,1))||lpad(nvl(max(substr(accno,3,3))+1,1),3,'0')
  from bank where substr(accno,1,1) = upper(substr(actype,1,1))), name, postcode);
  end;
 /
 
create or replace procedure cat_entry(cat char, sub char)
is 
newcid number(3);
newsid number(3);
begin
select nvl(max(cia),0)+1 into newcid from category where description = cat;
if newcid > 1 then
begin
select nvl(max(sia),0)+1 into newsid from subcategory where cia = newcid and description = sub;
if newsid > 1 then
dbms_output.put_line('Record already exists');
else
select nvl(max(sia),0)+1 into newsid from subcategory where cia = newcid;
insert into subcategory values(newsid, newcid,sub);
dbms_output.put_line('Entered a new entry in subcategory');
end if;
end;
else
begin
select nvl(max(cia),0)+1 into newcid from category;
insert into category values(newcid,cat);
insert into subcategory values (1,newcid,sub);
dbms_output.put_line('Entered new entries in both category and subcategory');
end;
end if;
dbms_output.put_line('Cia is '||newcid||' - Sia is '||newsid);
end;
/

